# @package _global_

# Defaults for training for the PushT dataset as per https://github.com/real-stanford/diffusion_policy.
# Note: We do not track EMA model weights as we discovered it does not improve the results. See
#       https://github.com/huggingface/lerobot/pull/134 for more details.

seed: 100000
dataset_repo_id: lerobot/pusht

override_dataset_stats:
  # TODO(rcadene, alexander-soare): should we remove image stats as well? do we use a pretrained vision model?
  observation.image:
    mean: [[[0.3840]], [[0.4069]], [[0.4211]]]  # (c,1,1)
    std:  [[[0.1929]], [[0.1846]], [[0.1750]]]  # (c,1,1)
  # TODO(rcadene, alexander-soare): we override state and action stats to use the same as the pretrained model
  # from the original codebase, but we should remove these and train our own pretrained model
  observation.state:
    min: [-0.0660,  0.0469, -1.7961, -0.1802,  1.5336,  0.1576,  0.1690,  0.7880, 0.7690,  0.8620,  0.7740,  0.6170,  0.9810,  0.2006, -0.5454,  0.6348, 1.1582, -2.2690, -0.3628, -0.3430,  0.5000,  0.5930,  0.5760,  0.5840, 0.5570,  0.1812]
    max: [-0.0062,  0.0782, -1.7227, -0.1799,  1.8019,  0.1951,  0.2141,  0.8210, 0.7930,  0.8880,  0.8300,  0.6460,  0.9840,  0.6613, -0.0515,  1.4094, 1.7434, -0.4365,  0.4357,  0.2484,  0.9810,  0.9450, 1.0000,  1.0000, 0.8180,  0.9997]
  action:
    min: [-0.0662,  0.0469, -1.7964, -0.1800,  1.5334,  0.1574,  0.1688,  0.7897, 0.7680,  0.8619,  0.7701,  0.6143,  0.9980,  0.2004, -0.5457,  0.6343, 1.1578, -2.2689, -0.3639, -0.3431,  0.4915,  0.5067,  0.4480,  0.4605, 0.4805,  0.0315]
    max: [-0.0062,  0.0781, -1.7227, -0.1800,  1.8021,  0.1952,  0.2142,  0.8193, 0.7963,  0.8992,  0.8286,  0.6475,  0.9980,  0.6613, -0.0515,  1.4091, 1.7432, -0.4355,  0.4356,  0.2486,  0.9862,  0.9451,  0.9980,  0.9980, 0.8232,  0.9980]

training:
  offline_steps: 200000
  online_steps: 0
  eval_freq: 25000
  save_freq: 25000
  save_checkpoint: true

  batch_size: 64
  grad_clip_norm: 10
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.image: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"

  # The original implementation doesn't sample frames for the last 7 steps,
  # which avoids excessive padding and leads to improved training results.
  drop_n_last_frames: 7  # ${policy.horizon} - ${policy.n_action_steps} - ${policy.n_obs_steps} + 1

eval:
  n_episodes: 64
  batch_size: 64

policy:
  name: diffusion

  # Input / output structure.
  n_obs_steps: 2
  horizon: 16
  n_action_steps: 8

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.image: [3, 480, 640]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.image: mean_std
    observation.state: min_max
  output_normalization_modes:
    action: min_max

  # Architecture / modeling.
  # Vision backbone.
  vision_backbone: resnet18
  crop_shape: [224, 224]
  crop_is_random: True
  pretrained_backbone_weights: null
  use_group_norm: True
  spatial_softmax_num_keypoints: 32
  # Unet.
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: True
  # Noise scheduler.
  noise_scheduler_type: DDPM
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0

  # Inference
  num_inference_steps: null  # if not provided, defaults to `num_train_timesteps`

  # Loss computation
  do_mask_loss_for_padding: false
